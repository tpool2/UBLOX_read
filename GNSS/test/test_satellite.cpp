#include <gtest/gtest.h>
#include "GNSS/satellite.hpp"

using gnss::SatelliteDatabase;
using gnss::gps::GPS_Satellite;
using gnss::galileo::Galileo_Satellite;

static uint32_t sat_04[] = 
{
    // Subframe 1
    0x22c05d10,0x28cbe9b4,0x5d40074,0x39e5a75,0x9242e37b,0x2df03e9b,0x88d3dca,0x9edec319,0x803ff9e6, 0xba462ed8,
    // Subframe 2
    0x22c05d10,0x28cc0a00,0x1eff97bc,0xd0779d5,0x8e54a58c,0x3fa4400a,0xa30d9af8,0x38ae873,0x32dbb74,0x1ec31fc4,
    // Subframe 3
    0x22c05d10,0x28cc2b88,0x309b4,0x1a33d03,0x49ea,0x87c14f87,0x7b660e1,0xb89deb62,0xbfe9dfb9,0x9ec00d3c,
    // Subframe 4
    0x22c05d10,0x28cc4c34,0x1e4080d8,0x3a7b78b7,0xa5bff76,0xb465f071,0xa2380a93,0x25698143,0x19242dd,0xab655b47,
    // Subframe 5
    0x22c05d10,0x28cc6dbc,0x102aaaac,0x2aaaaabc,0x2aaaaabc,0x2aaaaabc,0x2aaaaabc,0x2aaaaabc,0x2aaaaabc,0x2aaaaabc,
};

static uint32_t sat_07_msg[] = 
{
    0x22c05d10,0x28cbe9b4,0x5d40027,0x39e5a75,0x9242e37b,0x2df03e9b,0x88d3a0d,0x91dec326,0x80001f33,0x107bd9c,
    0x22c05d10,0x28cc0a00,0x11c0a891,0x8cdb2180,0x35c42443,0x8101d9,0x966db2ab,0x502a865,0x8338e859,0x9ec31f48,
    0x22c05d10,0x28cc2b88,0x2d3f5,0xae7ca7d5,0xbfe20992,0xb1cd8387,0x5f8e807,0x117b45b,0x3feab13d,0x91fe1680,
    0x22c05d10,0x28cc4c34,0x1e4080d8,0x3a7b78b7,0xa5bff76,0xb465f071,0xa2380a93,0x25698143,0x19242dd,0xab655b47,
    0x22c05d10,0x28cc6dbc,0x102aaaac,0x2aaaaabc,0x2aaaaabc,0x2aaaaabc,0x2aaaaabc,0x2aaaaabc,0x2aaaaabc,0x2aaaaabc,
};

static uint32_t sat_08[] = 
{
    0x22c05d10,0x28cbe9b4,0x5d40027,0x39e5a75,0x9242e37b,0x2df03e9b,0x88d02f6,0x85dec2f3,0x3ffd15,0xbfc07f88,
    0x22c05d10,0x28cc0a00,0x5ffa71a,0x8c413efc,0x1a5aa601,0xbf9d00f0,0x89fd611,0x81d2287b,0x38ff847,0x1ec2d090,
    0x22c05d10,0x28cc2b88,0x10e8fb,0x3f1a372b,0x709df,0x1d0f6a09,0x89e43f94,0x1de29232,0xbfe9381a,0x85fdb5dc,
    0x22c05d10,0x28cc4c34,0x1e4080d8,0x3a7b78b7,0xa5bff76,0xb465f071,0xa2380a93,0x25698143,0x19242dd,0xab655b47,
    0x22c05d10,0x28cc6dbc,0x102aaaac,0x2aaaaabc,0x2aaaaabc,0x2aaaaabc,0x2aaaaabc,0x2aaaaabc,0x2aaaaabc,0x2aaaaabc,
};

TEST(Satellite, Construct)
{
    std::shared_ptr<Satellite> gps_satellite = std::make_shared<GPS_Satellite>(2);
    ASSERT_EQ(gps_satellite->get_id(), 2);
}

TEST(Satellite, ConstructDefault)
{
    std::shared_ptr<Satellite> sat = std::make_shared<GPS_Satellite>();
    ASSERT_EQ(gps_satellite->get_id(), 0);
}

TEST(Satellite, GPS_Constellation)
{
    std::shared_ptr<Satellite> satellite = std::make_shared<GPS_Satellite>();
    ASSERT_EQ(satellite->get_constellation(), gnss::kGPS);
}

TEST(Satellite, Galileo_Constellation)
{
    std::shared_ptr<Satellite> satellite = std::make_shared<Galileo_Satellite>();
    ASSERT_EQ(satellite->get_constellation(), gnss::kGALILEO);
}

TEST(Database, GPS_Constellation)
{
    SatelliteDatabase database;
    database.update()
}